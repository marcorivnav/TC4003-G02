package main

import (
	"fmt"
	"mapreduce"
	"os"
	"regexp"
	"strconv"
	"strings"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge

	// Build the regex
	reg := regexp.MustCompile("[^0-9a-zA-Z]+")

	lowerCaseValue := strings.ToLower(value)

	// Split in words
	words := strings.Fields(lowerCaseValue)

	// Organize them in a map
	wordsMap := make(map[string]string)
	for _, word := range words {
		// Build safe words based only-characters rules
		safeWord := reg.ReplaceAllString(word, "")

		// Only the words that fit the 'charThreshold' are added to the map
		wordsMap[safeWord] = document
	}

	// Build the array using the map values
	var keyValuesSlice []mapreduce.KeyValue
	for key, value := range wordsMap {
		keyValuesSlice = append(keyValuesSlice, mapreduce.KeyValue{Key: key, Value: value})
	}

	return keyValuesSlice
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.

func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	valuesLength := len(values)

	// Initialize the result string with the key and length of values
	filesString := key + " " + strconv.Itoa(valuesLength) + " "

	// Iterate over the values
	for i := 0; i < valuesLength; i++ {
		singleValue := values[i]
		filesString += singleValue

		if i < valuesLength-1 {
			filesString += ","
		}
	}

	return filesString
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)

func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
