package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"io/ioutil"
	"os"
)

// doMap does the job of a map worker: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	// Read the .txt generated by makeInput() method, and check for errors.
	contents, err := ioutil.ReadFile(inFile)
	checkError(err)

	// Creation of nReduce number of files to reduce the data into.
	// Store in a slice the name of files in filesSystem
	var filesSystem []*os.File
	for r := 0; r < nReduce; r++ {
		file, _ := os.Create(reduceName(jobName, mapTaskNumber, r))
		filesSystem = append(filesSystem, file)
	}

	// Split the records using the ihash() method.
	// ihash() will produce a unique value.
	// Store them in one of the JSONs, as specified by the output of ihash.
	for _, kv := range mapF(inFile, string(contents)) {
		hashOutput := int(ihash(kv.Key))
		index := hashOutput % nReduce
		enc := json.NewEncoder(filesSystem[index])
		enc.Encode(&kv)
	}

	// Close all of the files.
	for i := 0; i < nReduce; i++ {
		filesSystem[i].Close()
	}
}

func ihash(s string) uint32 {
	h := fnv.New32a()
	h.Write([]byte(s))
	return h.Sum32()
}
